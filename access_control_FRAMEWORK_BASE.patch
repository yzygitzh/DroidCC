From 5b9e3a16cfbb4b2b7b333656974009aa50199d8d Mon Sep 17 00:00:00 2001
From: Ziyue Yang <yzylivezh@hotmail.com>
Date: Mon, 10 Apr 2017 23:04:52 +0800
Subject: [PATCH] access control patch

---
 Android.mk                                         |  1 +
 api/current.txt                                    | 20 ++++++
 api/system-current.txt                             | 20 ++++++
 core/java/android/app/DroidCCManager.java          | 45 ++++++++++++
 core/java/android/app/SystemServiceRegistry.java   | 10 +++
 core/java/android/content/Context.java             |  2 +
 core/java/android/os/IDroidCCService.aidl          | 13 ++++
 core/java/android/view/View.java                   | 40 +++++++++++
 .../java/com/android/server/DroidCCService.java    | 83 ++++++++++++++++++++++
 .../android/server/pm/PackageManagerService.java   | 35 ++++++---
 services/java/com/android/server/SystemServer.java |  8 +++
 11 files changed, 268 insertions(+), 9 deletions(-)
 create mode 100644 core/java/android/app/DroidCCManager.java
 create mode 100644 core/java/android/os/IDroidCCService.aidl
 create mode 100644 services/core/java/com/android/server/DroidCCService.java

diff --git a/Android.mk b/Android.mk
index 99e0c46..9a73dd4 100644
--- a/Android.mk
+++ b/Android.mk
@@ -206,6 +206,7 @@ LOCAL_SRC_FILES += \
 	core/java/android/os/IBatteryPropertiesListener.aidl \
 	core/java/android/os/IBatteryPropertiesRegistrar.aidl \
 	core/java/android/os/ICancellationSignal.aidl \
+	core/java/android/os/IDroidCCService.aidl \
 	core/java/android/os/IDeviceIdleController.aidl \
 	core/java/android/os/IMessenger.aidl \
 	core/java/android/os/INetworkActivityListener.aidl \
diff --git a/api/current.txt b/api/current.txt
index d7fdb2d..4db99a4 100644
--- a/api/current.txt
+++ b/api/current.txt
@@ -4187,6 +4187,12 @@ package android.app {
     field public static final int VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION = 3; // 0x3
   }
 
+  public class DroidCCManager {
+    ctor public DroidCCManager(android.content.Context, android.os.IDroidCCService);
+    method public boolean checkPermission(java.lang.String, int);
+    method public void setView(java.util.List<java.lang.String>, java.util.List<java.lang.String>);
+  }
+
   public class ExpandableListActivity extends android.app.Activity implements android.widget.ExpandableListView.OnChildClickListener android.widget.ExpandableListView.OnGroupCollapseListener android.widget.ExpandableListView.OnGroupExpandListener android.view.View.OnCreateContextMenuListener {
     ctor public ExpandableListActivity();
     method public android.widget.ExpandableListAdapter getExpandableListAdapter();
@@ -7745,6 +7751,7 @@ package android.content {
     field public static final java.lang.String DEVICE_POLICY_SERVICE = "device_policy";
     field public static final java.lang.String DISPLAY_SERVICE = "display";
     field public static final java.lang.String DOWNLOAD_SERVICE = "download";
+    field public static final java.lang.String DROIDCC_SERVICE = "droid_cc";
     field public static final java.lang.String DROPBOX_SERVICE = "dropbox";
     field public static final java.lang.String FINGERPRINT_SERVICE = "fingerprint";
     field public static final java.lang.String INPUT_METHOD_SERVICE = "input_method";
@@ -23084,6 +23091,18 @@ package android.os {
     method public abstract void binderDied();
   }
 
+  public abstract interface IDroidCCService implements android.os.IInterface {
+    method public abstract boolean checkPermission(java.lang.String, int) throws android.os.RemoteException;
+    method public abstract void setView(java.util.List<java.lang.String>, java.util.List<java.lang.String>) throws android.os.RemoteException;
+  }
+
+  public static abstract class IDroidCCService.Stub extends android.os.Binder implements android.os.IDroidCCService {
+    ctor public IDroidCCService.Stub();
+    method public android.os.IBinder asBinder();
+    method public static android.os.IDroidCCService asInterface(android.os.IBinder);
+    method public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;
+  }
+
   public abstract interface IInterface {
     method public abstract android.os.IBinder asBinder();
   }
@@ -36066,6 +36085,7 @@ package android.view {
     method public int getVerticalFadingEdgeLength();
     method public int getVerticalScrollbarPosition();
     method public int getVerticalScrollbarWidth();
+    method public void getViewHierarchyInfo(java.util.List<java.lang.String>, java.util.List<java.lang.String>);
     method public android.view.ViewTreeObserver getViewTreeObserver();
     method public int getVisibility();
     method public final int getWidth();
diff --git a/api/system-current.txt b/api/system-current.txt
index 3c88e59..40ac73f 100644
--- a/api/system-current.txt
+++ b/api/system-current.txt
@@ -4304,6 +4304,12 @@ package android.app {
     field public static final int VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION = 3; // 0x3
   }
 
+  public class DroidCCManager {
+    ctor public DroidCCManager(android.content.Context, android.os.IDroidCCService);
+    method public boolean checkPermission(java.lang.String, int);
+    method public void setView(java.util.List<java.lang.String>, java.util.List<java.lang.String>);
+  }
+
   public class ExpandableListActivity extends android.app.Activity implements android.widget.ExpandableListView.OnChildClickListener android.widget.ExpandableListView.OnGroupCollapseListener android.widget.ExpandableListView.OnGroupExpandListener android.view.View.OnCreateContextMenuListener {
     ctor public ExpandableListActivity();
     method public android.widget.ExpandableListAdapter getExpandableListAdapter();
@@ -7989,6 +7995,7 @@ package android.content {
     field public static final java.lang.String DEVICE_POLICY_SERVICE = "device_policy";
     field public static final java.lang.String DISPLAY_SERVICE = "display";
     field public static final java.lang.String DOWNLOAD_SERVICE = "download";
+    field public static final java.lang.String DROIDCC_SERVICE = "droid_cc";
     field public static final java.lang.String DROPBOX_SERVICE = "dropbox";
     field public static final java.lang.String FINGERPRINT_SERVICE = "fingerprint";
     field public static final java.lang.String HDMI_CONTROL_SERVICE = "hdmi_control";
@@ -25028,6 +25035,18 @@ package android.os {
     method public abstract void binderDied();
   }
 
+  public abstract interface IDroidCCService implements android.os.IInterface {
+    method public abstract boolean checkPermission(java.lang.String, int) throws android.os.RemoteException;
+    method public abstract void setView(java.util.List<java.lang.String>, java.util.List<java.lang.String>) throws android.os.RemoteException;
+  }
+
+  public static abstract class IDroidCCService.Stub extends android.os.Binder implements android.os.IDroidCCService {
+    ctor public IDroidCCService.Stub();
+    method public android.os.IBinder asBinder();
+    method public static android.os.IDroidCCService asInterface(android.os.IBinder);
+    method public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;
+  }
+
   public abstract interface IInterface {
     method public abstract android.os.IBinder asBinder();
   }
@@ -38358,6 +38377,7 @@ package android.view {
     method public int getVerticalFadingEdgeLength();
     method public int getVerticalScrollbarPosition();
     method public int getVerticalScrollbarWidth();
+    method public void getViewHierarchyInfo(java.util.List<java.lang.String>, java.util.List<java.lang.String>);
     method public android.view.ViewTreeObserver getViewTreeObserver();
     method public int getVisibility();
     method public final int getWidth();
diff --git a/core/java/android/app/DroidCCManager.java b/core/java/android/app/DroidCCManager.java
new file mode 100644
index 0000000..e7ef4be
--- /dev/null
+++ b/core/java/android/app/DroidCCManager.java
@@ -0,0 +1,45 @@
+package android.app;
+
+import android.annotation.SdkConstant;
+import android.annotation.SystemApi;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Build;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.os.RemoteException;
+import android.os.IDroidCCService;
+import android.util.Log;
+import android.view.View;
+
+import java.util.List;
+import java.util.Map;
+
+public class DroidCCManager {
+    IDroidCCService mService;
+    Context mContext;
+
+    public DroidCCManager(Context ctx, IDroidCCService service) {
+        mService = service;
+        mContext = ctx;
+    }
+
+    public void setView(List<String> idxList, List<String> viewStrList) {
+        try {
+            mService.setView(idxList, viewStrList);
+        } catch (Exception e) {
+            Log.e("DroidCCManager", e.toString());
+            e.printStackTrace();
+        }
+    }
+
+    public boolean checkPermission(String permission, int uid){
+        try {
+            return mService.checkPermission(permission, uid);
+        } catch(Exception e) {
+            Log.e("DroidCCManager", e.toString());
+            e.printStackTrace();
+        }
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/core/java/android/app/SystemServiceRegistry.java b/core/java/android/app/SystemServiceRegistry.java
index 3d264c6..16e36c6 100644
--- a/core/java/android/app/SystemServiceRegistry.java
+++ b/core/java/android/app/SystemServiceRegistry.java
@@ -86,6 +86,7 @@ import android.nfc.NfcManager;
 import android.os.BatteryManager;
 import android.os.DropBoxManager;
 import android.os.IBinder;
+import android.os.IDroidCCService;
 import android.os.IPowerManager;
 import android.os.IUserManager;
 import android.os.PowerManager;
@@ -704,6 +705,15 @@ final class SystemServiceRegistry {
             public RadioManager createService(ContextImpl ctx) {
                 return new RadioManager(ctx);
             }});
+
+        registerService(Context.DROIDCC_SERVICE, DroidCCManager.class,
+            new CachedServiceFetcher<DroidCCManager>() {
+            @Override
+            public DroidCCManager createService(ContextImpl ctx) {
+                IBinder b = ServiceManager.getService(Context.DROIDCC_SERVICE);
+                IDroidCCService service = IDroidCCService.Stub.asInterface(b);
+                return new DroidCCManager(ctx, service);
+            }});
     }
 
     /**
diff --git a/core/java/android/content/Context.java b/core/java/android/content/Context.java
index 758b6ff..ec2288e 100644
--- a/core/java/android/content/Context.java
+++ b/core/java/android/content/Context.java
@@ -3374,6 +3374,8 @@ public abstract class Context {
      */
     public static final String RADIO_SERVICE = "radio";
 
+    public static final String DROIDCC_SERVICE="droid_cc";
+
     /**
      * Determine whether the given permission is allowed for a particular
      * process and user ID running in the system.
diff --git a/core/java/android/os/IDroidCCService.aidl b/core/java/android/os/IDroidCCService.aidl
new file mode 100644
index 0000000..02c9176
--- /dev/null
+++ b/core/java/android/os/IDroidCCService.aidl
@@ -0,0 +1,13 @@
+// IDroidCCService.aidl
+package android.os;
+
+// Declare any non-default types here with import statements
+
+interface IDroidCCService {
+    /**
+     * Demonstrates some basic types that you can use as parameters
+     * and return values in AIDL.
+     */
+    void setView(in List<String> idxList, in List<String> viewStrList);
+    boolean checkPermission(String permission, int uid);
+}
diff --git a/core/java/android/view/View.java b/core/java/android/view/View.java
index dea004e..1e23539 100644
--- a/core/java/android/view/View.java
+++ b/core/java/android/view/View.java
@@ -29,6 +29,7 @@ import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.annotation.Size;
 import android.annotation.UiThread;
+import android.app.DroidCCManager;
 import android.content.ClipData;
 import android.content.Context;
 import android.content.ContextWrapper;
@@ -62,6 +63,7 @@ import android.os.Handler;
 import android.os.IBinder;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.os.Process;
 import android.os.RemoteException;
 import android.os.SystemClock;
 import android.os.SystemProperties;
@@ -9276,6 +9278,19 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
             event.setTargetAccessibilityFocus(false);
         }
 
+        // Pass the view info to DroidCC system service
+        try {
+            DroidCCManager dcm = (DroidCCManager) mContext.getSystemService("droid_cc");
+            List<String> idxList = new ArrayList<>();
+            List<String> viewStrList = new ArrayList<>();
+
+            getViewHierarchyInfo(idxList, viewStrList);
+            dcm.setView(idxList, viewStrList);
+        } catch (Exception e) {
+            Log.e("View: DroidCC: ", e.toString());
+            e.printStackTrace();
+        }
+
         boolean result = false;
 
         if (mInputEventConsistencyVerifier != null) {
@@ -18087,6 +18102,31 @@ public class View implements Drawable.Callback, KeyEvent.Callback,
     }
 
     /**
+     * Finds the index and string series of current view from root.
+     * idxList.get(i)'s ith child's viewStr is viewStrList.get(i + 1).
+     * viewStrList.get(0) is the root view's string.
+     * This is for DroidCC service.
+     *
+     * @return the list of view index from root.
+     */
+    public void getViewHierarchyInfo(List<String> idxList, List<String> viewStrList) {
+        View parent = this;
+        View child;
+
+        idxList.add(Integer.toString(-1));
+        viewStrList.add(this.toString());
+
+        while (parent.mParent != null && parent.mParent instanceof View) {
+            child = (View) parent;
+            parent = (View) parent.mParent;
+            if (parent instanceof ViewGroup) {
+                idxList.add(Integer.toString(((ViewGroup) parent).indexOfChild(child)));
+                viewStrList.add(parent.toString());
+            }
+        }
+    }
+
+    /**
      * Transforms a motion event from view-local coordinates to on-screen
      * coordinates.
      *
diff --git a/services/core/java/com/android/server/DroidCCService.java b/services/core/java/com/android/server/DroidCCService.java
new file mode 100644
index 0000000..571e914
--- /dev/null
+++ b/services/core/java/com/android/server/DroidCCService.java
@@ -0,0 +1,83 @@
+package com.android.server;
+
+import android.app.ActivityManager;
+import android.content.Context;
+import android.os.Binder;
+import android.os.RemoteException;
+import android.os.IDroidCCService;
+import android.util.Log;
+
+import java.io.InputStreamReader;
+import java.io.LineNumberReader;
+import java.lang.*;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.List;
+
+class ViewKey {
+    int mUid;
+    String mActivityName;
+    String mPackageName;
+    String mIdxListJoin;
+
+    public ViewKey(int uid, String activityName, String packageName, String idxListJoin) {
+        mUid = uid;
+        mActivityName = activityName;
+        mPackageName = packageName;
+        mIdxListJoin = idxListJoin;
+    }
+}
+
+class ViewInfo {
+    List<Integer> mIdxList;
+    List<String> mViewStrList;
+
+    public ViewInfo(List<Integer> idxList, List<String> viewStrList) {
+        mIdxList = idxList;
+        mViewStrList = viewStrList;
+    }
+}
+
+public class DroidCCService extends IDroidCCService.Stub {
+    private static Map<Integer, ViewKey> mLatestViewMap = new HashMap<>();
+    private static Map<ViewKey, ViewInfo> mViewInfoMap = new HashMap<>();
+    private static Map<ViewKey, Map<String, Boolean>> mViewPermMap = new HashMap<>();
+    ViewKey mCurrView;
+    Context mContext;
+
+    public DroidCCService(Context context) {
+        mContext = context;
+    }
+
+    private ViewKey genViewKey(List<String> idxList) {
+        int callingUid = Binder.getCallingUid();
+
+        String idxListJoin = "";
+        for (String idx: idxList) {
+            idxListJoin += idx;
+        }
+
+        ActivityManager am = (ActivityManager) mContext.getSystemService(Context.ACTIVITY_SERVICE);
+        List<ActivityManager.RunningTaskInfo> taskInfo = am.getRunningTasks(1);
+        String topActivityName = taskInfo.get(0).topActivity.getClassName();
+        String packageName = taskInfo.get(0).topActivity.getPackageName();
+
+        Log.d("DroidCCService: topActivity: ", topActivityName);
+        Log.d("DroidCCService: packageName: ", packageName);
+
+        return new ViewKey(callingUid, topActivityName, packageName, idxListJoin);
+    }
+
+    @Override
+    public void setView(List<String> idxList, List<String> viewStrList) throws RemoteException {
+        mCurrView = genViewKey(idxList);
+        mViewPermMap.put(mCurrView, new HashMap<String, Boolean>());
+    }
+
+    @Override
+    public boolean checkPermission(String permission, int uid) throws RemoteException {
+        Log.d("DroidCCService: checking permission: ", permission);
+        Log.d("DroidCCService: uid: ", Integer.toString(uid));
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java
index 7654cc9..2b52e4b 100644
--- a/services/core/java/com/android/server/pm/PackageManagerService.java
+++ b/services/core/java/com/android/server/pm/PackageManagerService.java
@@ -87,6 +87,7 @@ import android.Manifest;
 import android.app.ActivityManager;
 import android.app.ActivityManagerNative;
 import android.app.AppGlobals;
+import android.app.DroidCCManager;
 import android.app.IActivityManager;
 import android.app.admin.IDevicePolicyManager;
 import android.app.backup.IBackupManager;
@@ -3169,16 +3170,22 @@ public class PackageManagerService extends IPackageManager.Stub {
         }
 
         synchronized (mPackages) {
+            // Get DroidCC service
+            DroidCCManager dcm  = (DroidCCManager) mContext.getSystemService("droid_cc");
             final PackageParser.Package p = mPackages.get(pkgName);
             if (p != null && p.mExtras != null) {
                 final PackageSetting ps = (PackageSetting) p.mExtras;
                 final PermissionsState permissionsState = ps.getPermissionsState();
-                if (permissionsState.hasPermission(permName, userId)) {
+                if (permissionsState.hasPermission(permName, userId) &&
+                    // DroidCC: check permission
+                    dcm.checkPermission(permName, userId)) {
                     return PackageManager.PERMISSION_GRANTED;
                 }
                 // Special case: ACCESS_FINE_LOCATION permission includes ACCESS_COARSE_LOCATION
-                if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permName) && permissionsState
-                        .hasPermission(Manifest.permission.ACCESS_FINE_LOCATION, userId)) {
+                if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permName) &&
+                    permissionsState.hasPermission(Manifest.permission.ACCESS_FINE_LOCATION, userId) &&
+                    // DroidCC: check permission
+                    dcm.checkPermission(permName, userId)) {
                     return PackageManager.PERMISSION_GRANTED;
                 }
             }
@@ -3197,25 +3204,35 @@ public class PackageManagerService extends IPackageManager.Stub {
 
         synchronized (mPackages) {
             Object obj = mSettings.getUserIdLPr(UserHandle.getAppId(uid));
+            // Get DroidCC service
+            DroidCCManager dcm = (DroidCCManager) mContext.getSystemService("droid_cc");
             if (obj != null) {
                 final SettingBase ps = (SettingBase) obj;
                 final PermissionsState permissionsState = ps.getPermissionsState();
-                if (permissionsState.hasPermission(permName, userId)) {
+                if (permissionsState.hasPermission(permName, userId) &&
+                    // DroidCC: check permission
+                    dcm.checkPermission(permName, uid)) {
                     return PackageManager.PERMISSION_GRANTED;
                 }
                 // Special case: ACCESS_FINE_LOCATION permission includes ACCESS_COARSE_LOCATION
-                if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permName) && permissionsState
-                        .hasPermission(Manifest.permission.ACCESS_FINE_LOCATION, userId)) {
+                if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permName) &&
+                    permissionsState.hasPermission(Manifest.permission.ACCESS_FINE_LOCATION, userId) &&
+                    // DroidCC: check permission
+                    dcm.checkPermission(permName, uid)) {
                     return PackageManager.PERMISSION_GRANTED;
                 }
             } else {
                 ArraySet<String> perms = mSystemPermissions.get(uid);
                 if (perms != null) {
-                    if (perms.contains(permName)) {
+                    if (perms.contains(permName) &&
+                        // DroidCC: check permission
+                        dcm.checkPermission(permName, uid)) {
                         return PackageManager.PERMISSION_GRANTED;
                     }
-                    if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permName) && perms
-                            .contains(Manifest.permission.ACCESS_FINE_LOCATION)) {
+                    if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permName) &&
+                        perms.contains(Manifest.permission.ACCESS_FINE_LOCATION) &&
+                        // DroidCC: check permission
+                        dcm.checkPermission(permName, uid)) {
                         return PackageManager.PERMISSION_GRANTED;
                     }
                 }
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 7dd16d1..d02e3c3 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -361,6 +361,14 @@ public final class SystemServer {
             mOnlyCore = true;
         }
 
+        // Start DroidCC Service
+        try {
+            Slog.i(TAG, "DroidCC Service");
+            ServiceManager.addService(Context.DROIDCC_SERVICE, new DroidCCService(mSystemContext));
+        } catch (Throwable e) {
+            Slog.e(TAG, "Failure starting DroidCC Service", e);
+        }
+
         // Start the package manager.
         Slog.i(TAG, "Package Manager");
         mPackageManagerService = PackageManagerService.main(mSystemContext, installer,
-- 
1.9.1

